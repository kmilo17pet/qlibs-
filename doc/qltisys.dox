/*! @page qltisys_desc Recursive LTI Systems Evaluation by transfer functions.
* @tableofcontents
* \ref qltisys  is a class that evaluates single-input, single-output (SISO)
* transfer function models in real-valued systems.
* A transfer function is a model that describes the frequency-dependent response
* of a linear time-invariant system, and this class can handle both continuous-time
* and discrete-time systems. \ref qltisys can be used for simulating dynamic
* systems and implementing filters, compensators, or controllers.
*
* @section qltisys_cont Continous-time transfer functions
*
* Here, the transfer function \f$ G(s) \f$ is the linear mapping of the Laplace
* transform of the input, \f$ U(s)= \mathcal{L}[u(t)]\f$, to the Laplace transform
* of the output  \f$ Y(s)= \mathcal{L}[y(t)]\f$.
*
*
* \f$ G(s) = \frac{N(s)}{D(s)} = \frac{ b_{0}s^{n} + b_{1}s^{n-1} + b_{2}s^{n-2} + ... +  b_{n} }{ s^{n} + a_{1}s^{n-1} + a_{2}s^{n-2} + ... +  a_{n} } \f$
*
* \f$ N(s) \f$ and \f$ D(s) \f$ are the numerator and denominator polynomials in
* descending powers of \f$s\f$, respectively.
*
* To instantiate a continuous transfer function, you should define a variable
* of type \ref qLTISys_t, two arrays of N+1 elements with the coefficients of the
* polynomials for both, the numerator and denominator, and finally, an array of type
* \ref qLTISys_ContinuosX_t to hold the N states of the system.
* Then, you can call \ref qLTISys_Setup() to construct the system and set initial
* conditions. Subsequently,  you can evaluate the system with a given input-signal
* by just calling \ref qLTISys_Excite(). 
*
* @attention
* The user must ensure that the 
* evaluation of the system is executed periodically at the required time step.
*
* @subsection qltisys_ex1 Example: Evaluate the given continuous transfer function
*
*  \f$ G(s) = \frac{ 2s^{2} + 3s + 6 }{ s^{3} + 6s^{2} + 11s + 16 } \f$
*
*
*  @code{.c}
*  #include <stdio.h>
*  #include <stdlib.h>
*  #include "bsp.h"
*  #include "qltisys.h"
*  
*  #define SYS_ORDER   ( 3 )
*  const TickType_t  dt = 50; /*50mS time-step*/
*  qLTISys_t system;
*  float num[ SYS_ORDER+1 ] = { 0.0f, 2.0f, 3.0f, 6.0f };
*  float den[ SYS_ORDER+1 ] = { 1.0f, 6.0f, 11.0f, 16.0f };
*  qLTISys_ContinuosX_t x[ SYS_ORDER ];
*  
*  void xTaskSystemSimulate( void *arg )
*  {
*      qLTISys_Setup( &system, num, den, x, 0, SYS_ORDER+1, (float)dt/1000.0f ) );
*      float ut, yt;
*      for( ;; ) {
*          ut = BSP_InputGet();
*          yt = qLTISys_Excite( &system, ut );
*          vTaskDelay( dt / portTICK_RATE_MS) ;
*          printf( "u(t) = %0.2f   y(t)  = %0.2f \r\n", ut, yt );
*      }
*  }
*  @endcode
*
* @section qltisys_disc Discrete-time transfer functions
*
* The z-transform is used in discrete-time systems to deal with the relationship
* between an input signal \f$ u(t) \f$ and an output signal \f$ y(t) \f$ , so the
* transfer function is similarly written as \f$ G(z^{-1}) \f$  and is often
* referred to as the pulse-transfer function.
*
*  \f$ G(z^{-1}) = \frac{N(z^{-1})}{D(z^{-1})} = \frac{ b_{0} + b_{1}z^{-1} + b_{2}z^{-2} + ... +  b_{m}z^{-m} }{ 1 + a_{1}z^{-1} + a_{2}z^{-2} + ... +  a_{n}z^{-n} } \f$ 

* Discrete systems are instantiated in a similar way to continuous systems,
* but there are some differences. States are should be stored in an array of type
* \ref qLTISys_DiscreteX_t. The size of polynomials can vary according to
* their order, and you should pass the \ref #QLTISYS_DISCRETE directive on \ref
* qLTISys_Setup() in order to differentiate the system when it is being evaluated.
* Please take a look at the following example:
* 
* @subsection qltisys_ex2 Example: Evaluate the given discrete transfer function
*
*  \f$ G(z^{-1}) = \frac{ 0.1 + 0.2z^{-1} + 0.3z^{-2} }{ 1 - 0.85z^{-1} + 0.02z^{-2} } \f$ 
*
*  @code{.c}
*  #include <stdio.h>
*  #include <stdlib.h>
*  #include "bsp.h"
*  #include "qltisys.h"
*  
*  #define NB  ( 3 )
*  #define NA  ( 2 )
*  const TickType_t  Ts = 100; /*100mS sample time*/
*  qLTISys_t system;
*  float num[ NB ] = { 0.1f, 0.2f, 0.3f };
*  float den[ NA+1 ] = { 1.0f, -0.85f, 0.02f };
*  qLTISys_DiscreteX_t xk[ NB ];
*  
*  void xTaskSystemSimulate( void *arg )
*  {
*      qLTISys_Setup( &system, num, den, xk, NB, NA, QLTISYS_DISCRETE );
*      float uk, yk;
*      for( ;; ) {
*          uk = BSP_InputGet();
*          yk = qLTISys_Excite( &system, uk );
*          vTaskDelay( Ts / portTICK_RATE_MS) ;
*          printf( "u(k) = %0.2f   y(k)  = %0.2f \r\n", uk, yk );
*      }
*  }
*  @endcode
*/