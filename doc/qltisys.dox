/*! @page qltisys_desc Recursive LTI Systems Evaluation by transfer functions.
* @tableofcontents
* \ref qlibs::ltisys  is a class that evaluates single-input, single-output (SISO)
* transfer function models in real-valued systems.
* A transfer function is a model that describes the frequency-dependent response
* of a linear time-invariant system, and this class can handle both continuous-time
* and discrete-time systems. \ref qlibs::qltisys can be used for simulating dynamic
* systems and implementing filters, compensators, or controllers.
*
* @section qltisys_cont Continous-time transfer functions
*
* Here, the transfer function \f$ G(s) \f$ is the linear mapping of the Laplace
* transform of the input, \f$ U(s)= \mathcal{L}[u(t)]\f$, to the Laplace transform
* of the output  \f$ Y(s)= \mathcal{L}[y(t)]\f$.
*
*
* \f$ G(s) = \frac{N(s)}{D(s)} = \frac{ b_{0}s^{n} + b_{1}s^{n-1} + b_{2}s^{n-2} + ... +  b_{n} }{ s^{n} + a_{1}s^{n-1} + a_{2}s^{n-2} + ... +  a_{n} } \f$
*
* \f$ N(s) \f$ and \f$ D(s) \f$ are the numerator and denominator polynomials in
* descending powers of \f$s\f$, respectively.
*
* To instantiate a continuous transfer function, you should define a variable
* of type qlibs::continuousSystem, two arrays of N+1 elements with the coefficients of the
* polynomials for both, the numerator and denominator, and finally, an array of type
* \ref qlibs::continuousStates to hold the N states of the system.
* Then, you can call \ref continuousSystem::setup() to construct the system and set initial
* conditions. Subsequently, you can evaluate the system with a given input-signal
* by just calling \ref continuousSystem::excite().
*
* @attention
* The user must ensure that the 
* evaluation of the system is executed periodically at the required time step.
*
* @subsection qltisys_ex1 Example: Evaluate the given continuous transfer function
*
*  \f$ G(s) = \frac{ 2s^{2} + 3s + 6 }{ s^{3} + 6s^{2} + 11s + 16 } \f$
*
*
*  @code{.c}
*  #include <iostream>
*  #include <chrono>
*  #include <thread>
*  #include <qlibs.h>
*  
*  void xTaskSystemSimulate( void )
*  {
*      const real_t dt = 0.05; // Time step
*      std::chrono::milliseconds delay(static_cast<long long>( dt*1000 ) );
*      real_t num[] = { 0.0, 2.0, 3.0, 6.0 };
*      real_t den[] = { 1.0, 6.0, 11.0, 16.0 };
*      continuousStates x = { 0, 0, 0 }; // n = 3
*      continuousSystem gc( num, den, xC, dt );
*      real_t ut, yt;
*
*      for( ;; ) {
*          ut = BSP_InputGet();
*          yt = gc.excite( ut );
*          
*          std::this_thread::sleep_for(delay);
*          std::cout << "u(t) = " << ut << " y(t) = " << yt << std::endl;
*      }
*  }
*  @endcode
*
* Alternatively, you can also use a simpler definition by employing the 
* \ref qlibs::continuousTF structure as follows:
*
*  @code{.c}
*  #include <iostream>
*  #include <chrono>
*  #include <thread>
*  #include <qlibs.h>
*  
*  void xTaskSystemSimulate( void )
*  {
*      const real_t dt = 0.05; // Time step
*      std::chrono::milliseconds delay(static_cast<long long>( dt*1000 ) );
*      continuousTF<3> ctf= {
*          { 0.0, 2.0, 3.0, 6.0 },
*          { 1.0, 6.0, 11.0, 16.0 },
*      };
*
*      continuousSystem gc( ctf, dt );
*      real_t ut, yt;
*      for( ;; ) {
*          ut = BSP_InputGet();
*          yt = gc.excite( ut );
*          
*          std::this_thread::sleep_for(delay);
*          std::cout << "u(t) = " << ut << " y(t) = " << yt << std::endl;
*      }
*  }
*  @endcode
*
*
* @section qltisys_disc Discrete-time transfer functions
*
* The z-transform is used in discrete-time systems to deal with the relationship
* between an input signal \f$ u(t) \f$ and an output signal \f$ y(t) \f$ , so the
* transfer function is similarly written as \f$ G(z^{-1}) \f$  and is often
* referred to as the pulse-transfer function.
*
*  \f$ G(z^{-1}) = \frac{N(z^{-1})}{D(z^{-1})} = \frac{ b_{0} + b_{1}z^{-1} + b_{2}z^{-2} + ... +  b_{m}z^{-m} }{ 1 + a_{1}z^{-1} + a_{2}z^{-2} + ... +  a_{n}z^{-n} } \f$ 

* Discrete systems are instantiated in a similar way to continuous systems,
* but there are some differences. States are should be stored in an array of type
* \ref qlibs::discreteStates. The size of polynomials can vary according to
* their order.
* Please take a look at the following example:
* 
* @subsection qltisys_ex2 Example: Evaluate the given discrete transfer function
*
*  \f$ G(z^{-1}) = \frac{ 0.1 + 0.2z^{-1} + 0.3z^{-2} }{ 1 - 0.85z^{-1} + 0.02z^{-2} } \f$ 
*
*  @code{.c}
*  #include <iostream>
*  #include <chrono>
*  #include <thread>
*  #include <qlibs.h>
*
*  void xTaskSystemSimulate( void )
*  {
*      real_t num[] = { 0.1, 0.2, 0.3 };
*      real_t den[] = { 1.0, -0.85, 0.02 };
*      discreteStates xk[] = { 0, 0, 0 };
*      discreteSystem gc( num, den, xC );
*      real_t uk, yk;
*
*      for( ;; ) {
*          uk = BSP_InputGet();
*          yk = gc.exite( uk );
*          std::this_thread::sleep_for( std::chrono::milliseconds( 100 ) ); /*100mS sample time*/
*          std::cout << "u(k) = " << uk << " y(k) = " << yk << std::endl;;
*      }
*  }
*  @endcode
*
* Alternatively, you can also use a simpler definition by employing the 
* \ref qlibs::discreteTF structure as follows:
*
*  @code{.c}
*  #include <iostream>
*  #include <chrono>
*  #include <thread>
*  #include <qlibs.h>
*  
*  void xTaskSystemSimulate( void )
*  {
*      discreteTF<3,3> dtf= {
*          { 0.1, 0.2, 0.3 },
*          { 1.0, -0.85, 0.02 },
*      };
*      continuousSystem gc( dtf );
*      real_t ut, yt;
*      for( ;; ) {
*          ut = BSP_InputGet();
*          yt = gc.excite( ut );
*          
*          std::this_thread::sleep_for(delay);
*          std::cout << "u(t) = " << ut << " y(t) = " << yt << std::endl;
*      }
*  }
*  @endcode
*/