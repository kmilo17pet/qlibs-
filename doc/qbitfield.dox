/*! @page qbitfield_desc Bit-Field manipulation library
* @tableofcontents
* \ref BitField is a library of functions for creating and manipulating
* bit fields also known as bit arrays. These are series of zeroes and ones
* spread across an array of storage units, such as unsigned long integers.
*
* @section qbitfield_structure Structure
* 
* Bit arrays are stored in the \ref bitfield class. This class 
* has two elements: an array of unsigned long integers called @c field for storing the
* bits and an integer @c size for storing the number of bits in the array. 
*
*
* @section qbitfield_functions Functions
*
* @subsection qbitfield_setup Instance setup
*
* - \ref bitfield_size Use it to determine the number of bytes required for a BitField.
* - \ref bitfield::Setup() Setup a initialize a BitField instance.
*
* @subsection qbitfield_sbit Single-bit
*
* - \ref bitfield::setBit() Sets one bit in a BitField.
* - \ref bitfield::clearBit()  Clears one bit in a BitField.
* - \ref bitfield::toggleBit() Toggles (i.e. reverses the state of) a bit in a BitField.
* - \ref bitfield::readBit() Retrieve the state of a bit in a bitfield.
* - \ref bitfield::writeBit() Writes one bit in a bitfield.
*
* @subsection qbitfield_pattern Multiple-bits
*
* - \ref bitfield::clearAll()  Clear all the bits in the BitField.
* - \ref bitfield::setAll() Set all the bits in the BitField.
* - \ref bitfield::readUINTn() Reads an unsigned 32-bit value from the BitField.
* - \ref bitfield::writeUINTn() Writes an unsigned n-bit value from the BitField.
* - \ref bitfield::readFloat() Reads a 32-bit floating point value from the BitField.
* - \ref bitfield::writeFloat() Writes a 32-bit floating point value to the BitField.
*
* @subsection qbitfield_dump Dump
*
* - \ref bitField::dump() Copies n bytes from the bit-field instance to a designed memory area.
*
*
* @section qbitfield_workingwith Working with bitfields
*
*  @code{.c}
*  #include <iostream>
*  #include <qlibs.h>
*  
*  int main( int argc, char *argv[] )
*  {
*      bitfield vPort; // create the bitfield instance
*      uint8_t vPortArea[ QBITFIELD_SIZE(48) ] = { 0 }; // Create the bitfield storage area to hold 48bits
*      uint16_t rWord;
*
*      vPort.setup( vPortArea, sizeof(vPortArea) );
*      vPort.clearAll();
*      //we are going to write the following value in the bitfield = 0x8177AA55FF88
*      vPort.writeUINTn( 0, 0xAA55FF88, 32 ); // write the first 32 bits
*      vPort.writeUINTn( 32, 0x77, 8 ); // write one of the last two bytes
*      vPort.writeBit( 47, 1 );         // write the last bit of the last byte
*      vPort.writeBit( 40, 1 );         // write the first bit of the last byte
*      rWord = static_cast<uint16_t>( vPort.readUINTn( 20, 16 ); // read a word at offset 24
*      std::cout << std::hex  << vPortArea[0] << ", " 
                              << vPortArea[1] << ", "
                              << vPortArea[2] << ", "
                              << vPortArea[3] << ", "
                              << vPortArea[4] << ", "
                              << vPortArea[5] << ", "
                              << endl );
*      return EXIT_SUCCESS;
*  }
*  @endcode
*/