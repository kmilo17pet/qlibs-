/*! @page qfp16_desc Fixed-Point Q16.16 library
* @tableofcontents
* FP16 is a compact fixed-point number library intended for use in embedded
* systems. It includes a variety of transcendental functions and essential
* operators, carefully chosen for optimal performance.
*
* The format is a signed @c Q16.16, which is good enough for most purposes.
*
* @section qfp16_datatype_limits Datatype limits
*
* The maximum representable value is @c 32767.999985. The minimum value is @c -32768.0
*
* The minimum value is also used to represent @c fp16.overflow for overflow detection,
* so for some operations it cannot be determined whether it overflowed or the 
* result was the smallest possible value. In practice, this does not matter much.
*
* The smallest unit (machine precision) of the datatype is @c 1/65536=0.000015259.
*
* @section qfp16_functions Fixed-point functions
*
* All the provided functions operate on 32-bit numbers, fp16, which have 
* 16-bit integer part and 16-bit fractional part.
*
* @subsection qfp16_conv_functions Conversion functions
*
* Conversion from integers and floating-point values. These conversions retain 
* the numeric value and perform rounding where necessary.
*
* - fp16::from() Convert int/float or double to the fp16 type
* - fp16::toInt() Convert fp16 to integer.
* - fp16::toFloat() Convert fp16 to float.
* - fp16::toDouble() Convert fp16 to double.
* - fp16::toASCII()  Convert from fp16 to raw c-string.
*
* @subsection  qfp16_basic_arithmetic Basic arithmetic
*
* Basic operator overloading also perform rounding and detect overflows. When 
* overflow is detected, they return @c overflow as a marker value.
*
* - (+) Addition
* - (-) Subtraction
* - (*) Multiplication
* - (/) Division
*
* @subsection qfp16_exp_functions Exponential and transcendental functions
*
* Roots, exponents & similar.
*
* - fp16::sqrt()  Square root. Performs rounding and is accurate to fp16 limits.
* - fp16::exp()   Exponential function using power series approximation.
* Accuracy depends on range, worst case +-40 absolute for negative inputs and
* +-0.003% for positive inputs. Average error is +-1 for neg and +-0.0003% for pos.
* - fp16::log()  Natural logarithm using Newton approximation and fp16::exp().
* Worst case error +-3 absolute, average error less than 1 unit.
* - fp16::log2()  Logarithm base 2.
* - fp16::pow()  Computes the power of a fp16 number
*
*
* @subsection qfp16_trig_functions Trigonometric functions and helpers
*
* - fp16::sin()  Sine for angle in radians
* - fp16::cos()  Cosine for angle in radians
* - fp16::tan()  Tangent for angle in radians
* - fp16::asin()  Inverse of sine, output in radians
* - fp16::acos()  Inverse of cosine, output in radians
* - fp16::atan()  Inverse of tangent, output in radians
* - fp16::atan2()  Arc tangent in radians x,y
* - fp16::sinh()  Hyperbolic sine
* - fp16::cosh()  Hyperbolic cosine
* - fp16::tanh()  Hyperbolic tangent
* - fp16::radToDeg()  Converts angle units from radians to degrees.
* - fp16::degToRad()  Converts angle units from degrees to radians
* - fp16::wrapToPi()  Wrap the fixed-point angle in radians to [−pi pi]
* - fp16::wrapTo180()  Wrap the fixed-point angle in degrees  to [−180 180]
*
*
* @section qfp16_example Example: Solution of the quadratic equation
* 
* This draft example computes one solution of the quadratic equation
* by using the fixed point format. Equation is given by:
*
* \f$ x = \frac{ -b + \sqrt{ b^{2} - 4ac} }{ 2a } \f$
*
*  @code{.c}
*  #include <iostream>
*  #include <qlibs.h>
*  
*  int main( int argc, char *argv[] ) 
*  {
*      fp16 a = 1.5_fp;
*      fp16 b = 5.2_fp;
*      fp16 c = 4.0_fp;
*      fp16 result;
*      result = ( -b + fp16::sqrt( ( b*b )  - ( 4_fp*a*c ) ) )/( 2_fp*a );
*
*      std::cout << " result = " << result << std::endl;
*      return EXIT_SUCCESS;
*  }
*  @endcode
*/