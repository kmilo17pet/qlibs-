/*! @page qpid_desc PID Controller
* @tableofcontents
* A Proportional Integral Derivative (PID) controller is an automatically 
* optimized and accurate control system responsible for ensuring that a 
* process remains as close to the desired value as possible regardless of 
* various disruptions. The controller compares the measured process variable  
* \f$ y(t)\f$ and a desired Setpoint \f$ r(t)\f$ (desired outcome). Based on 
* that comparison, the controller calculates the Proportional, Integral and 
* Derivative terms and adds them to obtain the output signal \f$ u(t) \f$ that 
* attempts to minimize the error. This output signal is then used to command
* the Final Control Element (e.g an actuator) that is in charge of operating 
* the process.
*
* Proportional is used to find out the error between the desired value and 
* actual value and is responsible for the corrective response. Integral is 
* applied to calculate all the past values of error and then integrate them to
* find out the Integral term. When error is expelled from the system this 
* integral stops increasing. The derivative is used to predict the expected 
* error values in the future based on the present values. Controlling effect can be
* increased if the system has a rapid rate of change, which is also based on 
* Derivative. Combining all these three operations gives the name Proportional 
* Integral Derivative (PID) Controller.
*
* qLibs provides the \ref qpid implementation, which, apart from the simplified 
* overview representation of the PID controller, it also addresses some practical
* issues and includes additional features as listed below:
* 
* - Derivative filter
* - Anti-windup
* - Bumpless transfer
* - SetPoint weighting
* - Auto-tuning
* - Additive MRAC
*
* @section qpid_approach PID Controller approach
*
* The mathematical model and practical loop use a direct control action for all
* the PID terms, which means an increasing positive error results in an 
* increasing positive control output correction.
*
* The overall control function implemented in ::qPID_Automatic mode is 
* given by:
*
* <center>
* \f$ v(t)= \psi(t)r(t) + [ K_{c}e_{b}(t) + K_{i}\int [ e(t) + c(t-1) ]dt + K_{d}f_{d}(t) ] \f$ 
*
*
* \f$ u(t) = \text{Sat}[ v(t), u_{min}, u_{max} ]\f$ 
*
* </center>
* where \f$r(t)\f$ is the set-point, \f$y(t)\f$ the process output, \f$ e(t) \f$
* its the error \f$K_{c},K_{i},K_{d}\f$ the PID gains respectively and 
* \f$u(t)\f$ the control action.
*
* \f$\psi(t)\f$ is the adaptive gain from the additive MRAC (later explained)
*
* As shown above, the derivative term \f$f_{d}(t)\f$ is the output of a 
* low-pass filter that takes the raw derivative as input.
*
* <center> \f$ f_{d}(t) = \text{LPF}[ \frac{de_{c}(t)}{dt} ]\f$  </center>
*
* and \f$ c(t)\f$, the saturation feedback for the anti-windup, with \f$K_{w}\f$
* as the adjustment parameter.
*
* <center> \f$ c(t) = K_{w}[ u(t) - v(t) ] \f$ </center>
*
* <center>
* @htmlonly
* <!DOCTYPE html>
* <html>
* <head>
* <title>qpid</title>
* <meta charset="utf-8"/>
* </head>
* <body><div class="mxgraph" style="max-width:100%;border:1px solid transparent;" data-mxgraph="{&quot;highlight&quot;:&quot;#0000ff&quot;,&quot;nav&quot;:true,&quot;zoom&quot;:0.85,&quot;resize&quot;:true,&quot;toolbar&quot;:&quot;zoom layers tags lightbox&quot;,&quot;edit&quot;:&quot;_blank&quot;,&quot;xml&quot;:&quot;&lt;mxfile host=\&quot;app.diagrams.net\&quot; modified=\&quot;2022-10-31T00:47:47.906Z\&quot; agent=\&quot;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36\&quot; etag=\&quot;YkSCUyH4jOQ27EaRfF8V\&quot; version=\&quot;20.5.1\&quot; type=\&quot;google\&quot;&gt;&lt;diagram id=\&quot;Y54Sw13SpVrxC9X4pJjL\&quot; name=\&quot;PÃ¡gina-1\&quot;&gt;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&lt;/diagram&gt;&lt;/mxfile&gt;&quot;}"></div>
* <script type="text/javascript" src="https://viewer.diagrams.net/js/viewer-static.min.js"></script>
* </body>
* </html>
* @endhtmlonly
* <em>PID Implementation</em>
* </center>
*
* @section qpid_maninput Manual Mode 
* When the operation mode is changed to ::qPID_Manual, the feedback is disconnected and 
* the controller works in open loop being commanded by the manual input \f$ m(t) \f$. 
* Since the controller is a dynamic system, it is necessary to make sure that
* the state of the system is correct when switching the controller between manual
* and automatic mode. When the system is in manual mode, the control algorithm 
* produces a control signal that may be different from the manually generated 
* control signal. It is necessary to make sure that the two outputs coincide at 
* the time of switching. This is called bumpless transfer and it's given by 
*
* <center> \f$ v(t) = \int [ K_{T}m(t) + c(t-1) ]dt\f$ </center>
*
* @section qpid_create Creating a PID Controller
*
* Before you start using a controller, it must be instantiated first
* via the \ref qPID_controller_t type and then configured using the \ref qPID_Setup() API, 
* where you can define the PID gains and time step.
*
*  Example: Instantiating an configuring a PID controller:
*  @code{.c}
*  qPID_controller_t control;
*  const float kc = 1.0f, ki = 0.1f, kd = 0.0f;
*  const float dt = 0.01f; // time-step of 10mS
*  int ret;
*
*  ret = qPID_Setup( &control, kc, ki, kd, dt );
*  if ( 0 == ret ) {
*      // error, pid controller cant be configured
*  }
*  @endcode
*
*
*  @section qfpid_usage Using the controller
*
*  The following example illustrates how a PID controller can be used to regulate
*  the speed of a DC motor. PID control operates on a separate task running
*  periodically at a rate of 50mS. The speed measurement is read through
*  an analog input and then scaled to the appropriate units (RPM). The \ref qPID_Control() 
*  function will be in charge of computing the control action and updating the internal
*  states of the controller. Then, the control output gets scaled back in order to
*  send the control command by using the PWM(Pulse Width Modulation) module. 
*
*  @subsection qpid_ex1 Example: Speed control using a PID controller:
*  @code{.c}
*  #include <stdio.h>
*  #include <stdlib.h>
*  #include "freertos/FreeRTOS.h"
*  #include "freertos/task.h"
*  #include "bsp.h"
*  #include "qpid.h"
*  
*  const TickType_t  dt = 50; //50mS time-step
*  void xTaskPIDspeedControl( void *arg );
*  float SetPoint = 300.0f; // desired motor speed 300rpm
*  
*  void xTaskPIDspeedControl( void *arg )
*  {
*      qPID_controller_t *controller = (qPID_controller_t *)arg;
*      float processMeasurement;
*      float controlOutput;
*      for ( ;; ) {
*          processMeasurement = BSP_ScaletoSpeed ( BSP_AnalogRead( BSP_AI_SPEED_CHANNEL ) );
*          controlOutput = qPID_Control( controller, SetPoint, processMeasurement );
*          BSP_PWMSet( BSP_AO_SPEED_PWM_CHANNEL, BSP_ScaletoPWM( controlOutput ) ); 
*          vTaskDelay( dt / portTICK_RATE_MS) ;
*      }
*  }
*  
*  int main( int argc, char *argv[] ) 
*  {
*      qPID_controller_t speedControl;
*      int ret;
*      
*      BSP_SystemInit();
*      ret = qPID_Setup( &speedControl, 1, 0.1, 0, (float)dt/1000.0f );
*      if ( 0 == ret ) {
*          puts( "ERROR: Cant configure PID controller" );
*      }
*      qPID_SetSaturation( &speedControl, 0.0f, 100.0f );
*      // Create the task that handles the speed control at the defined rate
*      xTaskCreate( xTaskPIDspeedControl, "speedControl", 1024, &speedControl, configMAX_PRIORITIES - 1 ,NULL );
*      vTaskStartScheduler();
*      for( ;; );
*      return EXIT_SUCCESS;
*  }
*  @endcode
*
*
* @section qpid_mrac Additive MRAC (Model Reference Adaptive Control)
*
* Model Reference Adaptive Control (MRAC) is a strategy where the controller 
* of the closed-loop is adapted by an adjustment mechanism, which takes \f$ y_{m}(t) \f$ 
* from a reference model as input and tries to adjust the controller output \f$v(t)\f$. 
* The adjustment mechanism used by \ref qpid is the enhanced MIT-rule approach,
* which adapts a feed-forward gain by the error between the system \f$ y(t) \f$
* and a reference model \f$ y_{m}(t) \f$, therefore is the so-called Gradient approach.
*
* <center>
* \f$ e_{m}(t) = y(t) - y_{m}(t)\f$ 
*
* \f$ \delta(t) = -\gamma  \frac{ e_{m}(t) y_{m}(t) }{ \beta + y_{m}^{2}(t)  }  \f$ 
* </center>
*
* where \f$\gamma(t)\f$ is the adaptation gain and \f$\beta(t)\f$ is introduced 
* to remove the problem of the possible division by zero if \f$y_{m}^{2}(t) \f$
* gets too small. 
*
* The MRAC adaptation is then computed by integrating the \f$\delta(t)\f$ term 
* as follows:
*
* <center> \f$ \psi(t) = \int [ \delta(t) + c(t) ] dt \f$ </center>
*
* This method can be used to adapt to slower changes but can become unstable for
* abrupt changes to the system. Therefore, this implementation uses a so-called 
* modified MRAC (M-MRAC) where the adaptation is later added to a PID controller, 
* being the MRAC the additive loop.
* 
* Abrupt changes to the system are absorbed by the  PID controller, while the 
* change of the dynamics will still be handled by the MIT gain \f$\psi(t)\f$. 
* This results in the equation of the control function presented at the 
* beginning of this section.
*
* To use the additive MRAC, you should first instantiate a reference model and 
* then, enable the MRAC by using the \ref qPID_SetMRAC() API. Here, you must provide
* a pointer to the output of the reference model and the adaptation gain \f$\gamma(t)\f$
*
*  @subsection qpid_ex2 Example: Speed control with PID controller with an additive MRAC:
*  @code{.c}
*  #include <stdio.h>
*  #include <stdlib.h>
*  #include "freertos/FreeRTOS.h"
*  #include "freertos/task.h"
*  #include "bsp.h"
*  #include "qpid.h"
*  #include "qltisys.h" //to create the reference model
*  
*  #define REF_MODEL_ORDER   ( 1 )
*
*  const TickType_t dt = 50; //50mS time-step
*  void xTaskPIDspeedControl( void *arg );
*  
*  void xTaskPIDspeedControl( void *arg )
*  {
*      qPID_controller_t *controller = (qPID_controller_t *)arg;
*      qLTISys_t ref_model;
*      float num[ REF_MODEL_ORDER+1 ] = { 0.0f, 1.0f, };
*      float den[ REF_MODEL_ORDER+1 ] = { 3.0f, 1.0f, };
*      float processMeasurement;
*      float SetPoint = 300.0f; // desired motor speed 300rpm
*      float refmodel_output = 0.0f;
*      float controlOutput = 0.0f;
*
*      qLTISys_Setup( &ref_model, num, den, x, 0, REF_MODEL_ORDER+1, (float)dt/1000.0f ) );
*      qPID_SetMRAC( controller, &refmodel_output, 0.01f );
*      for ( ;; ) {
*          refmodel_output = qLTISys_Excite( &ref_model, controlOutput );
*          processMeasurement = BSP_ScaletoSpeed ( BSP_AnalogRead( BSP_AI_SPEED_CHANNEL ) );
*          controlOutput = qPID_Control( controller, SetPoint, processMeasurement );
*          BSP_PWMSet( BSP_AO_SPEED_PWM_CHANNEL, BSP_ScaletoPWM( controlOutput ) );
*          vTaskDelay( dt / portTICK_RATE_MS) ;
*      }
*  }
*  
*  int main( int argc, char *argv[] ) 
*  {
*      qPID_controller_t speedControl;
*      int ret;
*      
*      BSP_SystemInit( );
*      ret = qPID_Setup( &speedControl, 1, 0.1, 0, (float)dt/1000.0f );
*      if ( 0 == ret ) {
*          puts( "ERROR: Cant configure PID controller" );
*      }
*      qPID_SetSaturation( &speedControl, 0.0f, 100.0f );
*      // Create the task that handles the speed control at the defined rate
*      xTaskCreate( xTaskPIDspeedControl, "speedControl", 1024, &speedControl, configMAX_PRIORITIES - 1 ,NULL );
*      vTaskStartScheduler();
*      for( ;; );
*      return EXIT_SUCCESS;
*  }
*  @endcode
*
* @section qpid_autotune Autotuning
*
* Autotuning can eliminate much of the trial and error of a manual tuning 
* approach, especially if you do not have a lot of loop tuning experience. 
* Performing the autotuning procedure will get the tuning parameters close to 
* their optimal values, but additional manual tuning may be required to get 
* the tuning parameters to their optimal values.
*
* The Autotune feature for the controller will only run for a limited amount of time
* after it gets enabled. In other words, autotuning does not run continuously 
* during operation. Whenever there is a substantial change in the process 
* dynamics, the tuning process will need to be repeated in order to derive new 
* gains required for optimal control.
*
* Autotuning is performed by using the following recursive algorithm:
*
* <center>
* \f$ L(t) =  \frac{ P(t-1)\phi }{ \lambda + \phi^{T}P(t-1)\phi  } \f$
*
* \f$\theta(t) = \theta(t-1) + L[ y(t) - \phi^{T}\theta(t)  ] \f$
*
* \f$ P(t) = \lambda^{-1}[ I - L(t)+\phi^{T}]P(t-1) \f$
*
* \f$ \theta(t) = \begin{bmatrix} \theta_{1}(t) & \theta_{2}(t) \end{bmatrix}^T  \f$ 
* and \f$ \phi(t) = \begin{bmatrix} -y(t-1) & u(t-1) \end{bmatrix}^T  \f$ 
*
* \f$ g(t) = \frac{ (1 - \mu)\theta_{2}(t) }{ 1 + \theta_{1} } + \mu g(t-1)  \f$
*
* \f$ \tau(t) = \frac{ ( \mu - 1 )dt }{ ln( |\theta_{1}| ) } + \mu \tau(t-1)  \f$
*
* \f$ K_{c}(t) = \alpha \frac{ r_{2} \tau(t) }{ g(t)dt } \f$
*
* \f$ K_{i}(t) = \alpha \frac{ g(t)[ 0.54 + 0.33r_{1} ] }{ r_{2}dt } \f$
*
* \f$ K_{c}(t) = \alpha \frac{ K_{c}(t)dt }{ r_{2} } \f$
* </center>
*
* where  \f$ r_{1} = dt/\tau(t) \f$  and \f$ r_{2} = 1.35 + 0.25r_{1} \f$ 
*
* and the remaining parameters \f$\mu\f$, \f$\alpha\f$, \f$\lambda\f$ are internally
* computed for best performance.
*
* @subsection qpid_autotune_usage Autotuning Usage
*
* In order to use the autotuner, you must first instantiate the \ref qPID_AutoTuning_t
* object and bind it to a previously configured PID controller by using the 
* \ref qPID_BindAutoTuning().
*
* After this, you can enable autotuning via \ref qPID_EnableAutoTuning() 
* for a defined number of intervals. When the autotune ends, the resulting PID
* gains will be applied to the bounded controller.
* 
* @subsection qpid_ex3 Example: Speed control with PID controller and autotuning:
* This example takes advantage of the FreeRTOS task notifications to enable the
* autotuning when a rising edge is detected on a certain digital input. Autotuning
* is enabled for 5 sec. Note that the setpoint is briefly modified during this 
* process to stimulate the process. Upon completion, the setpoint is restored to 
* its original value.
*
*  @code{.c}
*  #include <stdio.h>
*  #include <stdlib.h>
*  #include "freertos/FreeRTOS.h"
*  #include "freertos/task.h"
*  #include "bsp.h"
*  #include "qpid.h"
*  
*  #define REF_MODEL_ORDER   ( 1 )
*
*  const TickType_t dt = 50; //50mS time-step
*  void xTaskPIDspeedControl( void *arg );
*  TaskHandle_t pid_task;
*  
*  void gpio_Int_Handler( void ) 
*  {
*      BaseType_t xHigherPriorityTaskWoken = pdFALSE;
*
*      vTaskNotifyGiveFromISR( pid_task, &xHigherPriorityTaskWoken);
*      portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
*      HAL_GPIO_ClearStatusFlag();
*  }
*
*  void xTaskPIDspeedControl( void *arg )
*  {
*      qPID_controller_t *controller = (qPID_controller_t *)arg;
*      float processMeasurement;
*      float SetPoint = 300.0f; // desired motor speed 300rpm
*      float tmpSetPoint = 320.0f;
*      float *p_setpoint  = &SetPoint;  
*      float refmodel_output = 0.0f;
*      float controlOutput = 0.0f;
*      uint32_t notification_autotune_enable;
*
*      qLTISys_Setup( &ref_model, num, den, x, 0, REF_MODEL_ORDER+1, (float)dt/1000.0f ) );
*      qPID_SetMRAC( controller, &refmodel_output, 0.01f );
*      for ( ;; ) {
*          notification_autotune_enable = ulTaskNotifyTake( pdTRUE, 0 ); // dont wait
*          if ( notification_autotune_enable ) {
*              p_setpoint = &tmpSetPoint; 
*              qPID_EnableAutoTuning( controller, 100 ); //enable for 5 seconds ( 100*50mS )
*          }
*          if ( qPID_AutoTuningComplete( controller) ) {
*              p_setpoint = &SetPoint;
*              qPID_EnableAutoTuning( controller, 0uL ); //disable
*          }
*          processMeasurement = BSP_ScaletoSpeed ( BSP_AnalogRead( BSP_AI_SPEED_CHANNEL ) );
*          controlOutput = qPID_Control( controller, *p_setpoint, processMeasurement );
*          BSP_PWMSet( BSP_AO_SPEED_PWM_CHANNEL, BSP_ScaletoPWM( controlOutput ) ); 
*          vTaskDelay( dt / portTICK_RATE_MS) ;
*      }
*  }
*  
*  int main( int argc, char *argv[] ) 
*  {
*      qPID_controller_t speedControl;
*      qPID_AutoTuning_t at;
*      int ret;
*      
*      BSP_SystemInit( );
*      HAL_GPIO_Enable( GPIO12, GPIO_INPUT );
*      HAL_GPIO_SetInterruptMode( GPIO12, RISING_EDGE );
*      HAL_GPIO_EnableInterrupts( );
*      ret = qPID_Setup( &speedControl, 1, 0.1, 0, (float)dt/1000.0f );
*      if ( 0 == ret ) {
*          puts( "ERROR: Cant configure PID controller" );
*      }
*      qPID_SetSaturation( &speedControl, 0.0f, 100.0f );
*      qPID_BindAutoTuning( &speedControl, &at );
*      // Create the task that handles the speed control at the defined rate
*      xTaskCreate( xTaskPIDspeedControl, "speedControl", 1024, &speedControl, configMAX_PRIORITIES - 1 , &pid_task );
*      vTaskStartScheduler();
*      for( ;; );
*      return EXIT_SUCCESS;
*  }
*  @endcode
*/